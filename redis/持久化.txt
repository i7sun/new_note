1.两种持久化机制
	1.1 RDB 对redis中的数据执行周期化的持久化
	1.2 AOF 对每条写入命令作为日志
	
2.RDB持久化机制的优点
	2.1 RDB会生成多个数据文件,每个数据文件都代表了某一个时刻中redis的数据，非常适合冷备
	2.2 RDB对redis对外提供的读写服务，影响非常小，可以让redis保持高性能
	2.3 相对于AOF持久化机制来说，直接基于RDB数据文件来重启和恢复redis，更加快速
	
3.RDB持久化的缺点
	3.1 在redis故障时，丢失的数据比ADF多
	3.2 RDB每次在fork子进程来执行RDB快照数据文件生成时，如果数据文件特别大，可能
	会导致对客户端提供的服务暂停数毫秒，甚至数秒
	
4.AOF持久化机制的优点
	4.1 AOF可以更好的保护数据不丢失，一般AOF会每隔一秒，通过一个后台线程执行一次fsync操作
	4.2 AOF日志文件以append-only模式吸入，所以没有任何磁盘寻址的开销，写入性能非常高
	4.3 AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端读写
	4.4 AOF日志文件的命令通过非常可读的方式进行记录
	
5.AOF持久化的缺点
	5.1 对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大
	5.2 AOF开启后，支持的写QPS回避RDB的低
	5.3 不能恢复特定时间点的数据
	
6.RDB持久化的配置
	save 60 1000	每隔60秒，有1000个key发生的变化，就更行快照文件
	可以配置多条这样的规则
	
7.开启AOF持久化配置
	appendonly yes	打开AOF持久化机制
	
8.AOF的fsync策略
	1) always: 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去
	2) everysec: 每秒将os cache中的数据fsync到磁盘，这个最常用
	3) no: 仅仅redis负责将数据写入os cache就撒手不管了，然后后面os自己会时不时有自己的策略将数据刷入磁盘，不可控
	
9.AOF和RDB的优先级
	当appendonly yes 时,恢复AOF机制下备份的数据,只有appendonly no时,redis才会在重启的时候恢复RDB的数据