在Kubernetes中，最小的管理元素不是一个个独立的容器，而是pod,pod是最小的
管理，创建，计划的最小单元

什么是Pod
	一个Pod（就像一群鲸鱼，一个豌豆荚）相当于一个共享context的配置组，
	在同一个context下，应用可能还会有独立的cgroup隔离机制，一个Pod是
	一个容器环境下的“逻辑主机”，它可能包含一个或者多个紧密相连的应用，
	这些引用可能是在同一个屋里主机或虚拟机上
	
	Pod的context可以理解成多个linux命名空间的联合
		PID 命名空间(同一个Pod)中应用可以看到其他进程
		网络 命名空间(同一个Pod中的应用对相同的IP地址和端口有权限)
		IPC 命名空间(同一个Pod中的应用可以通过VPC或者POSIX进行通信)
		UTS命名空间(同一个Pod中的应用共享一个主机名称)

		
管理
	Pod通过提供一个高层次抽象而不是底层的接口简化了应用的部署及管理，
	Pod作为最小的部署及管理单位，位置管理，拷贝赋值，资源共享，依赖关系
	都是自动处理的
	
Pod的使用
	Pod可以作为垂直应用整合的载体，但是它的主要特点是支持同地协作，同地管理程序
	例：
		内容管理系统，文件和数据加载，本地缓存等
		日志和检查点备份，压缩，循环，快照等
		数据交换监控，日志追踪，日志记录和监控适配器，以及事件发布等等
		代理，网桥，适配器
		控制，管理，配置，更新

Pod的直接暴露使如下的操作变得更容易
	1.调度和管理的易用性
	2.在没有代理的情况下，通过通过API可以对Pod进行操作
	3.Pod的生命周期与管理器的生命周期的分离
	4.解耦控制器和服务，后端管理器仅仅监控Pod
	5.划分清楚了Kubelet级别的功能与云平台级别的功能，Kubelet实际上是一个Pod管理器
	6.高可用，当发生一些删除或者维护的过程时，Pod会自动的在他们被终止之前创建新的替代
	
容器的终止
	因为pod代表着一个集群中节点上运行的进程，让这些进程不再被需要，优雅的退出
	很重要，用户应该能请求删除，并且在进程终止的情况下能知道，而且能保证删除最终完成
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	