1.Master 组件
	Master组件提供集群的管理控制中心,可以在任何节点上运行，但为了简单起见，
通常在一台VM/机器上启动所有的Master组件，并且不会在此机器上运行用户容器

2.kube-apiserver
	kube-apiserver用于暴露Kuberneters API.任何的资源请求/调用操作都是通过
kube-apiserver提供的接口进行

3.ETCD
	etcd是Kubernetes提供默认的存储系统，保存所有集群数据，使用时需要为etcd
数据提供备份计划

4.kube-controller-manager
	kube-controller-manager运行管理控制器，它们是集中处理常规任务的后台线程，
逻辑上，每个控制器是一个单独的进程，但为了降低复杂性，他们都被编译成单个二进制
文件，并在单个进程中运行。
	这些控制器包括:
		节点(Node)控制器
		副本(Replication)控制器:负责维护系统中每个副本中的pod
		端点(Endpoints)控制器：填充Endpoints对象(即连接Services&Pods).
		Service Account和Token控制器:为新的Namespace创建默认账户访问API Token
		
5.cloud-controller-manager
	云控制器管理器负责与底层云提供商的平台交互。
云控制器管理器是Kubernetes版本1.6中引入的，目前还是Alpha的功能。

	cloud-controller-manager 具体功能：
    节点（Node）控制器
    路由（Route）控制器
    Service控制器
    卷（Volume）控制器
	
6.kube-schduler
	kebu-scheduler 监视新创建没有分配到Node的Pod,为Pod选择一个Node
	
7.插件addons
	插件(addon)是实现集群pod和Services功能的，pod由Deployments，
ReplicatioController等进行管理

8.DNS
	集群DNS是一个DNS服务器，能够为Kubernetes services提供DNS记录
	
9.用户界面
	kube-ui 提供集群状态基础信息查看
	
10.容器资源监测
	容器资源监测提供一个UI浏览监控数据
	
11.节点(Node)组件
	节点组件运行在Node,提供Kubernetes运行时环境，以及维护Pod
	
12.kubelet
	kebulet是主要的节点代理，它会监视已分配给节点的Node
	
13.kube-proxy
	kube-proxy通过在主机上维护网络规则并执行连接转发来实现Kubernetes服务抽象
	
14.docker
	docker用于运行容器
	
15.RKT
	rkt运行容器，作为docker工具的替代方案

16.supervisord
	supervisord 是一个轻量级的监控系统，用户保障kubelet和docker运行
	
17.fluentd 是一个守护进程
	
	
























