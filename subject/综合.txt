一.基础知识
	
1.代码区域(查看c语言版本讲解,从上-下的内存分段)
2.false和null
	为false的七种情况：0 0.0 '' '0' flase array() null
	出现null的三种情况（unset($a)、直接申明、未定义的变量）
3.$_SERVER

4.字符串处理函数

5.数组处理函数
	array_change_key_case($arr);	返回字符串键名全为小写或大写的数组
	array_chunk($arr,$size);	将一个数组分割成多个数组
	array_column($arr,$column);	返回数组中指定的一列
	array_combine() 创建一个数组，用一个数组的键作为其键名，另一个数组的值作为其值
	array_count_values() 统计数组中所有的值出现的次数
	array_diff_assoc($arr1,$arr2,..) 带索引获取数组的差集(键名也用于比较)
	




6.文件处理函数

7.闭包
	$a = function(){ $b = 123; $c = 456; }
	$a();
	
8.正则表达式

9.面向对象
	抽象 abstract    类中有抽象方法就必须定义为抽象类
	接口：   方法都是抽象的，  没有方法体
	final类： 不可被继承、不可被重写
	魔术方法：
	
	trait:通过在类中使用use 关键字，声明要组合的Trait名称，
		具体的Trait的声明使用Trait关键词，Trait不能实例化。
		trait Dog{}
		class cat{use Dog;}
		cat类中的方法在Dog类中也存在，则会使用cat类中的方法
		
		可以应用多个trait,可使用as及解决相同方法名的问题
		class dog{
			use trait1,trait2{
				trait2::eat as eaten;
				trait2::drive as driven;
			}
		}
		
		
10.命名空间
	
11.设计模式

12.常用算法和数据结构


二、高并发
	1.微服务
	
	2.常用名词解释
		QPS：每秒的http请求数
		吞吐量：单位时间内处理的请求数量(QPS、并发数)
		PV：页面点击量,一个用户在24小时内任意访问的页面数量
		UV:独立访客
		
	3.数据库优化
		数据库缓存层、
		数据库的负载均衡：数据库读写分离
		mycat分库分表、分区操作(查询几个分区的数据)
		
	4.redis缓存服务器
	
	
	5.分布式（微服务）解决方案
		任务分解（服务）、节点通信
		分布式和集群的关系：
		分布式：一个业务拆分成多个子系统，部署在不同的服务器上
		集群：同一个业务，部署在多个服务器上（配置文件的管理
	
	6.性能优化相关
		mysql查询优化、
		redis缓存、接口优化
		索引、索引的数据结构、存储引擎、数据库锁、
		数据库事务、分库分表、中间件
		分布式事务、分布式寻址、分布式锁
	
	7.Redis
		Redis数据类型
		Redis哨兵机制、Redis的特点（不同版本）集群
		Redis工作流程：socket通信    epoll I/O复用
		client发起  server接收请求  client写入 server接收  server返回  client接收
		Redis内存分配
		Redis优化与存储：内存（控制和节省内存） 配置优化
		Redis持久化（aof 基于语句追加文件  rdb定时快照(默认)  虚拟内存 diskstore）
		过期策略：被动删除、主动删除(冷数据)、超过内存触发主动清理
		分布式锁：18K+
		redis数据类型、redis、memcache、mongodb区别、使用场景
		redis分布式锁、
		redis优化（mongodb优化）、
		redis持久化、
		redis过期策略
		
	8.nginx常规配置
	
	9.zend引擎了解

	
	10.存储引擎：
		innodb
		事务型，主键查询的性能高
		内部的优化机制：读取磁盘数据会构建hash索引，插入数据的缓冲区
		外键、行级锁、安全恢复、热备份
		myisam：数据安全要求不高的：速度快、占用空间小

	11.锁
		共享锁（读）、排他锁（写）
		锁粒度：innodb

	12.索引：
	随机I/O   顺序I/O   提供查询速度
	索引的类型：
	索引的优化方案：
	聚集(簇)索引、非聚集(簇)索引
	主键索引、唯一索引、外键索引（避免使用）、全文索引、联合索引

	索引的具体优化：(Mysql性能优化的书籍)
	建立索引的原则（整理内容）
	中型规模的解决方案


	复杂SQL的考察
		子查询语句、
		联合查询、
		条件逻辑（case when then else end）