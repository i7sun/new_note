1、瓜子二手车技术架构的演变
平台--->SOA---->微服务

2、高并发：
整体的解决方案，基于开发过的项目技术架构
2.1、名词
并发：多个程序在同一个机器同一个时间点，只有一个在程序在运行
高并发：在同一个时间点，并发访问
QPS：每秒的http请求数
吞吐量：单位时间内处理的请求数量(QPS、并发数)
PV：页面点击量,一个用户在24小时内任意访问的页面数量
UV:独立访客
带宽：峰值流量和页面的平均大小
带宽=PV/(3600*24)*平均页面大小*8
峰值每秒请求数(QPS)=(PV*80%)/(6*3600*20%)
压力测试、性能优化：

2.2解决方案
QPS优化：根据实际情况优化
QPS:50   不需要优化
QPS:100  数据库缓存、数据库负载均衡
QPS:800  带宽  硬件  100M      10M   10K   1000
QPS：1000   分布式redis memcache (2W左右)   业务分离（任务分解、消息通信）

2.3前端后端分离
前端优化：
组件化工具：gulp 基于流的前端自动化构建工具

cdn加速（配置--流量优化）、防盗链、防爬虫、减少http请求数、
添加异步请求、启用浏览器缓存和文件压缩、单独图片服务器

数据库优化：
数据库缓存层、数据库的负载均衡：数据库读写分离
mycat分库分表、分区操作(查询几个分区的数据)

Nosql缓存：
热数据：(memcached、redis、mongodb)

静态html缓存（后台生成静态文件）
web服务器配置优化

2.4 分布式（微服务）解决方案----千万级PV以上
任务分解（服务）、节点通信
分布式和集群的关系：
分布式：一个业务拆分成多个子系统，部署在不同的服务器上
集群：同一个业务，部署在多个服务器上（配置文件的管理）

qps、tps、数据量
商品、订单、用户
跨域会话请求：
cookie（主流）:access_token(userid/token/timestamp)
session集中存储：redis、db(不建议)
session sticky
session replication

通信协议问题：
TCP/IP:四层抽象模型
OSI模型
3次握手协议  4次挥手        （全双工通信）
tcp通信原理：发送缓冲区、接收缓冲区   socket通信
通信协议：tcp/ip   udp/ip  multicast
swoole(封装了通信协议)  socket阻塞模型  tcp的非阻塞IO
数据的序列化：RPC

服务注册中心：
命名服务、服务注册、服务发现

分布式事务、分布式锁
消息中间件：
kafka    日志处理   ：批量发送消息
mq：  rabbitmq  activemq: 消息队列

协程编程、并发编程：swoole(workman源码)      node   go































